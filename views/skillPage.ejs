<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= skill.text %></title>
  <link rel="stylesheet" href="/css/style.css">
  <script src="https://cdn.jsdelivr.net/npm/canvas-confetti@1.4.0/dist/confetti.browser.min.js"></script>
</head>
<body>
<header>
  <h1><%= skill.text %></h1>
  <h3 class="skill-score">Skill Score: <%= skill.score %></h3>
</header>
<main>
  <div id="hexagon-container-skill" class="svg-container-skill">
    <!-- Los hexágonos se generarán aquí -->
  </div>
  <!-- <img src="<%= skill.icon %>" alt="<%= skill.text %> icon" /> -->
  <h2 class="description-header">Description</h2>
  <p><%= skill.description %></p>
  <h2 class="task-to-complete-header">Tasks to Complete</h2>
  <ul class="checkbox-list">
    <% skill.tasks.forEach(function(task) { %>
      <li class="checkbox-item">
        <input type="checkbox" id="<%= task %>" name="tasks" value="<%= task %>">
        <label for="<%= task %>"><%= task %></label>
      </li>
    <% }); %>
  </ul>

  <h2 class="provide-evidence-header" id="provideEvidenceHeader">Provide evidence</h2>
  <input type="text" id="skillEvidence" name="userInput" placeholder="Enter a URL or explanation as evidence for completing this skill">

  <button class="submit-evidence" id="submitEvidenceButton">Submit Evidence</button>

  <!-- Sección de Resources -->
  <div class="resources">
    <h2 class="resources-header">Resources Used</h2>
    <ul>
      <% skill.resources.forEach(function(re) { %>
        <li>
          <label for="<%= re %>"><%= re %></label>
        </li>
      <% }); %>
    </ul>
  </div>

  <!-- Contenedor de la tabla de evidencias -->
  <div id="tablaContainer">
    <h2>Unverified Evidence Submissions</h2>
    <table class="tableEvidences">
      <thead>
      <tr>
        <th>User</th>
        <th>Evidence</th>
        <th>Actions</th>
      </tr>
      </thead>
      <tbody id="evidenceTableBody">
      <!-- Aquí se añadirán las filas dinámicamente -->
      </tbody>
    </table>
  </div>
</main>
<footer>
  <a href="/index">Back to Home</a>
</footer>
<script>
  const checkboxes = document.querySelectorAll('.checkbox-item input[type="checkbox"]');
  const evidenceSection = document.getElementById('provideEvidenceHeader');
  const skillEvidence = document.getElementById('skillEvidence');
  const submitButton = document.getElementById('submitEvidenceButton');
  const tableBody = document.getElementById('evidenceTableBody');
  const skillId = '<%= skill.id %>';

  // Cargar el estado inicial de los checkboxes desde el servidor
  window.addEventListener('DOMContentLoaded', async () => {
    try {
      const response = await fetch(`/skills/getSelectedTasks/${skillId}`);
      const { selectedTasks } = await response.json();

      checkboxes.forEach(checkbox => {
        checkbox.checked = selectedTasks.includes(checkbox.id);
      });

      toggleEvidenceSection();
    } catch (error) {
      console.error('Error al cargar los selectedTasks:', error);
    }
  });

  // Función para comprobar si todos los checkboxes están seleccionados
  function areAllCheckboxesChecked() {
    return Array.from(checkboxes).every(checkbox => checkbox.checked);
  }

  // Función para mostrar u ocultar la sección de evidencias
  function toggleEvidenceSection() {
    if (areAllCheckboxesChecked()) {
      evidenceSection.style.display = 'block';
      skillEvidence.style.display = 'block';
      submitButton.style.display = 'block';
    } else {
      evidenceSection.style.display = 'none';
      skillEvidence.style.display = 'none';
      submitButton.style.display = 'none';
    }
  }

  // Escuchar cambios en los checkboxes
  checkboxes.forEach(checkbox => {
    checkbox.addEventListener('change', async () => {
      toggleEvidenceSection();

      const selectedTasks = Array.from(checkboxes)
        .filter(checkbox => checkbox.checked)
        .map(checkbox => checkbox.id);

      try {
        await fetch(`/skills/updateSelectedTasks/${skillId}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ selectedTasks })
        });

        console.log('Selected tasks updated successfully.');
      } catch (error) {
        console.error('Error al actualizar los selectedTasks:', error);
      }

      if (areAllCheckboxesChecked()) {
        launchConfetti();
      }
    });
  });

  fetch('/skills/api')
          .then(response => response.json())
          .then(data => {
            console.log(data); //Verificar los datos cargados
            createOneHexagon(data, '<%= skill.id %>');  // Llamamos a la función que buscará y creará el hexágono
          })
          .catch(error => console.error("Error al cargar el JSON", error));

  function createOneHexagon(skills, skillId) {
    const container = document.getElementById('hexagon-container-skill');

    skills.forEach(skill => {
      if(skill.id.toString() === skillId.toString()) {
        const hexagonWrapper = document.createElement('div');
        hexagonWrapper.classList.add('svg-wrapper');
        hexagonWrapper.setAttribute('data-id', skill.id);
        hexagonWrapper.setAttribute('data-description', skill.description); // Agrega descripción para mostrarla en el hover

        const svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
        svg.setAttribute('width', '100');
        svg.setAttribute('height', '100');
        svg.setAttribute('viewBox', '0 0 100 100');

        const hexagon = document.createElementNS("http://www.w3.org/2000/svg", "polygon");
        hexagon.setAttribute('points', '50,5 95,27.5 95,72.5 50,95 5,72.5 5,27.5');
        hexagon.classList.add('hexagon');

        if (skill.allEvidencesApproved) {
          hexagon.setAttribute('fill', 'green'); // Cambia el color a verde
        }

        const text = document.createElementNS("http://www.w3.org/2000/svg", "text");
        text.setAttribute('x', '50%');
        text.setAttribute('y', '20%');
        text.setAttribute('text-anchor', 'middle');
        text.setAttribute('fill', 'black');
        text.setAttribute('font-size', '10');

        const lines = skill.text.split("\n\n\n");
        lines.forEach((line, index) => {
          const tspan = document.createElementNS("http://www.w3.org/2000/svg", "tspan");
          tspan.setAttribute('x', '50%');
          tspan.setAttribute('dy', '1.2em');
          tspan.setAttribute('font-weight', 'bold');
          tspan.textContent = line;
          text.appendChild(tspan);
        });

        const icon = document.createElementNS("http://www.w3.org/2000/svg", "image");
        icon.setAttribute('x', '35%');
        icon.setAttribute('y', '60%');
        icon.setAttribute('width', '30');
        icon.setAttribute('height', '30');
        icon.setAttribute('href', skill.icon);

        svg.appendChild(hexagon);
        svg.appendChild(text);
        svg.appendChild(icon);

        hexagonWrapper.appendChild(svg);

        container.appendChild(hexagonWrapper);
      }
    });
  }

  // Función para lanzar confeti
  function launchConfetti() {
    confetti({
      particleCount: 200,
      spread: 360,
      origin: { y: 0.5 },
      zIndex: 1000,
      ticks: 100,
      gravity: 0.5,
      scalar: 1.2
    });
  }

  // Cargar evidencias en la tabla
  async function loadEvidencesInTable() {
    try {
      const response = await fetch(`/skills/getEvidences/${skillId}`);
      const data = await response.json();
      tableBody.innerHTML = '';

      data.forEach(evidence => {
        const row = document.createElement('tr');

        const userColumn = document.createElement('td');
        fetch(`/users/getUser/${evidence.user}`)
          .then(response => response.json())
          .then(user => {
            userColumn.textContent = user.username;
          });

        row.appendChild(userColumn);

        const evidenceColumn = document.createElement('td');
        evidenceColumn.textContent = evidence.evidence;
        row.appendChild(evidenceColumn);

        const actionData = document.createElement('td');
        actionData.className = 'buttonTd';

        const acceptButton = document.createElement('button');
        acceptButton.textContent = 'Approve';
        acceptButton.className = 'acceptButton';
        acceptButton.addEventListener('click', async () => {
          try {
            const evidenceText = row.querySelector('td:nth-child(2)').textContent;
            const userText = row.querySelector('td:nth-child(1)').textContent;
            await fetch(`/skills/approveEvidence/${skillId}/${userText}`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ evidence: evidenceText })
            });

            loadEvidencesInTable();
          } catch (error) {
            console.error('Error al aprobar la evidencia:', error);
          }
        });

        const rejectButton = document.createElement('button');
        rejectButton.textContent = 'Reject';
        rejectButton.className = 'rejectButton';
        rejectButton.addEventListener('click', async () => {
          try {
            const evidenceText = row.querySelector('td:nth-child(2)').textContent;
            const userText = row.querySelector('td:nth-child(1)').textContent;
            await fetch(`/skills/rejectEvidence/${skillId}/${userText}`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ evidence: evidenceText })
            });

            row.remove();
            loadEvidencesInTable();
          } catch (error) {
            console.error('Error al rechazar la evidencia:', error);
          }
        });

        actionData.appendChild(acceptButton);
        actionData.appendChild(rejectButton);
        row.appendChild(actionData);

        tableBody.appendChild(row);
      });
    } catch (error) {
      console.error('Error al cargar las evidencias:', error);
    }
  }

  window.onload = function () {
    loadEvidencesInTable();
  };
</script>

</body>
</html>