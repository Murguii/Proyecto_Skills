<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= skill.text %></title>
  <link rel="stylesheet" href="/css/style.css">
  <script src="https://cdn.jsdelivr.net/npm/canvas-confetti@1.4.0/dist/confetti.browser.min.js"></script>
</head>
<body>
<header>
  <h1><%= skill.text %></h1>
  <h3 class="skill-score">Skill Score: 1 point</h3>
</header>
<main>
  <div id="hexagon-container-skill" class="svg-container-skill">
    <!-- Los hexágonos se generarán aquí -->
  </div>
  <!-- <img src="<%= skill.icon %>" alt="<%= skill.text %> icon" /> -->
  <h2 class="description-header">Description</h2>
  <!--<p><%= skill.description %></p>-->
  <p>Texto de la descripción a añadir aquí</p>
  <h2 class="task-to-complete-header">Tasks to Complete</h2>
  <ul class="checkbox-list">
    <li class="checkbox-item">
      <input type="checkbox" id="task1" name="tasks" value="task1">
      <label for="task1">Texto de la tarea 1</label>
    </li>
    <li class="checkbox-item">
      <input type="checkbox" id="task2" name="tasks" value="task2">
      <label for="task2">Texto de la tarea 2</label>
    </li>
    <li class="checkbox-item">
      <input type="checkbox" id="task3" name="tasks" value="task3">
      <label for="task3">Texto de la tarea 3</label>
    </li>
  </ul>

  <h2 class="provide-evidence-header" id="provideEvidenceHeader">Provide evidence</h2>
  <input type="text" id="skillEvidence" name="userInput" placeholder="Enter a URL or explanation as evidence for completing this skill">

  <button class="submit-evidence" id="submitEvidenceButton">Submit Evidence</button>

  <!-- Sección de Resources -->
  <div class="resources">
    <h2 class="resources-header">Resources Used</h2>
    <ul>
      <li>Online Course: "Mastering JavaScript Basics" - Udemy</li>
      <li>Book: "Eloquent JavaScript" by Marijn Haverbeke</li>
      <li>API: MDN Web Docs (JavaScript)</li>
      <li>Library: canvas-confetti for animation</li>
    </ul>
  </div>

  <!-- Contenedor de la tabla de evidencias -->
  <div id="tablaContainer">
    <h2>Unverified Evidence Submissions</h2>
    <table class="tableEvidences">
      <thead>
      <tr>
        <th>User</th>
        <th>Evidence</th>
        <th>Actions</th>
      </tr>
      </thead>
      <tbody id="evidenceTableBody">
      <!-- Aquí se añadirán las filas dinámicamente -->
      </tbody>
    </table>
  </div>
</main>
<footer>
  <a href="/">Back to Home</a>
</footer>
<script>

  //recoger los elementos que deben aparecer cuando se seleccionan todos los checkboxes
  const checkboxes = document.querySelectorAll('.checkbox-item input[type="checkbox"]');
  const evidenceSection = document.getElementById('provideEvidenceHeader');
  const skillEvidence = document.getElementById('skillEvidence');
  const submitButton = document.getElementById('submitEvidenceButton');
  const tableBody = document.getElementById('evidenceTableBody');

  submitButton.addEventListener('click', () => {
    let textEvidence = skillEvidence.value;
    console.log(textEvidence);
    if(textEvidence){
      //crear una nueva fila
      let row = document.createElement('tr');

      //crear la celda con el nombre del usuario
      let userData = document.createElement('td');
      userData.textContent = 'nombre del usuario';

      //crear la celda con el texto de la evidencia
      let evidenceData = document.createElement('td');
      evidenceData.textContent = textEvidence;

      //crear la celda donde estarán los botones de aceptar y rechazar
      let actionData = document.createElement('td');
      actionData.className = 'buttonTd';

      let acceptButton = document.createElement('button');
      acceptButton.textContent = 'Approve';
      acceptButton.className = 'acceptButton';

      let rejectButton = document.createElement('button');
      rejectButton.textContent = 'Reject';
      rejectButton.className = 'rejectButton';

      //añadimos los botones a la celda anterior
      actionData.appendChild(acceptButton);
      actionData.appendChild(rejectButton);

      //añadimos las celdas a la fila
      row.appendChild(userData);
      row.appendChild(evidenceData);
      row.appendChild(actionData);

      //añadimos la fila a la tabla
      tableBody.appendChild(row);

      //dejamos vacio el input text de las evidencias
      skillEvidence.value = '';
    }
  });

  // Función para comprobar si todos los checkboxes están seleccionados
  checkboxes.forEach(checkbox => {
    checkbox.addEventListener('change', () => {
      if (areAllCheckboxesChecked()) {
        // Mostrar los elementos
        evidenceSection.style.display = 'block';
        skillEvidence.style.display = 'block';
        submitButton.style.display = 'block';

        // Llamar a la función que lanza el confeti
        launchConfetti();
      }
    });
  });

  // Comprobar si todos los checkboxes están marcados
  function areAllCheckboxesChecked() {
    return Array.from(checkboxes).every(checkbox => checkbox.checked);
  }

  // Función para lanzar confeti
  function launchConfetti() {
    confetti({
      particleCount: 200,  // Número de partículas
      spread: 360,         // Ángulo de dispersión
      origin: { y: 0.5 },  // Partículas desde el centro vertical
      zIndex: 1000,        // Asegura que el confetti esté por encima de otros elementos
      ticks: 100,          // Duración del confetti
      gravity: 0.5,        // Gravedad de las partículas
      scalar: 1.2          // Tamaño de las partículas
    });
  }

  fetch('/skills.json')
          .then(response => response.json())
          .then(data => {
            createOneHexagon(data, '<%= skill.id %>');  // Llamamos a la función que buscará y creará el hexágono
          })
          .catch(error => console.error("Error al cargar el JSON", error));


  function createOneHexagon(skills, skillId) {
    const container = document.getElementById('hexagon-container-skill');

    skills.forEach(skill => {
      if(skill.id === skillId) {
        const hexagonWrapper = document.createElement('div');
        hexagonWrapper.classList.add('svg-wrapper');
        hexagonWrapper.setAttribute('data-id', skill.id);
        hexagonWrapper.setAttribute('data-description', skill.description); // Agrega descripción para mostrarla en el hover

        const svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
        svg.setAttribute('width', '100');
        svg.setAttribute('height', '100');
        svg.setAttribute('viewBox', '0 0 100 100');

        const hexagon = document.createElementNS("http://www.w3.org/2000/svg", "polygon");
        hexagon.setAttribute('points', '50,5 95,27.5 95,72.5 50,95 5,72.5 5,27.5');
        hexagon.classList.add('hexagon');

        const text = document.createElementNS("http://www.w3.org/2000/svg", "text");
        text.setAttribute('x', '50%');
        text.setAttribute('y', '20%');
        text.setAttribute('text-anchor', 'middle');
        text.setAttribute('fill', 'black');
        text.setAttribute('font-size', '10');

        const lines = skill.text.split("\n\n\n");
        lines.forEach((line, index) => {
          const tspan = document.createElementNS("http://www.w3.org/2000/svg", "tspan");
          tspan.setAttribute('x', '50%');
          tspan.setAttribute('dy', '1.2em');
          tspan.setAttribute('font-weight', 'bold');
          tspan.textContent = line;
          text.appendChild(tspan);
        });

        const icon = document.createElementNS("http://www.w3.org/2000/svg", "image");
        icon.setAttribute('x', '35%');
        icon.setAttribute('y', '60%');
        icon.setAttribute('width', '30');
        icon.setAttribute('height', '30');
        icon.setAttribute('href', skill.icon);

        svg.appendChild(hexagon);
        svg.appendChild(text);
        svg.appendChild(icon);

        hexagonWrapper.appendChild(svg);

        container.appendChild(hexagonWrapper);
      }
    });
  }

</script>
</body>
</html>
